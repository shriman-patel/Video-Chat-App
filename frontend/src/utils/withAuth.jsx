import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';

const withAuth = (WrappedComponent) => {
    
    const AuthComponent = (props) => {
        
        // useNavigate рдХреЛ рд╕рд┐рд░реНрдл рдПрдХ рдмрд╛рд░, рдЯреЙрдк рд▓реЗрд╡рд▓ рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ
        const navigate = useNavigate(); 
        
        // рдПрдХ state variable рд░рдЦреЗрдВ рдЬреЛ authentication рдХреА рд╕реНрдерд┐рддрд┐ рдХреЛ hold рдХрд░реЗ
        const [isAuth, setIsAuth] = useState(false);

        const isAuthenticated = () => {
            // рд╣рдо рд╕реАрдзреЗ token рдХреА presence рдкрд░ рдирд┐рд░реНрднрд░ рд╣реИрдВ
            return !!localStorage.getItem("token");
        };

        useEffect(() => {
            if (isAuthenticated()) {
                // рдЕрдЧрд░ token рд╣реИ, рддреЛ state рдХреЛ true рдХрд░реЗрдВ
                setIsAuth(true);
            } else {
                // рдЕрдЧрд░ token рдирд╣реАрдВ рд╣реИ, рддреЛ рддреБрд░рдВрдд рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
                navigate("/auth", { replace: true });
            }
        }, [navigate]); // navigate рдХреЛ dependency array рдореЗрдВ рд░рдЦрдирд╛ best practice рд╣реИ

        // 
        // ЁЯСЗя╕П рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╕реБрдзрд╛рд░: рдХрдВрдбреАрд╢рдирд▓ рд░реЗрдВрдбрд░рд┐рдВрдЧ
        //

        // 1. рдЕрдЧрд░ authentication check рдЕрднреА рдкреВрд░рд╛ рдирд╣реАрдВ рд╣реБрдЖ рд╣реИ рдпрд╛ рд╡рд┐рдлрд▓ рд░рд╣рд╛ рд╣реИ, рддреЛ null (рдпрд╛ loading) рд░рд┐рдЯрд░реНрди рдХрд░реЗрдВред
        // рдЗрд╕рд╕реЗ рдЕрдирдзрд┐рдХреГрдд рдХрдВрдкреЛрдиреЗрдВрдЯ рдХреЛ рдПрдХ рдкрд▓ рдХреЗ рд▓рд┐рдП рднреА рд░реЗрдВрдбрд░ рд╣реЛрдиреЗ рд╕реЗ рд░реЛрдХрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред
        if (!isAuth) {
            return null; 
            // рдпрджрд┐ рдЖрдк рд▓реЛрдбрд┐рдВрдЧ рд╕реНрдХреНрд░реАрди рджрд┐рдЦрд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ, рддреЛ рдпрд╣рд╛рдБ <LoadingSpinner /> рд░рд┐рдЯрд░реНрди рдХрд░реЗрдВ
        }

        // 2. рдЕрдЧрд░ authentication рд╕рдлрд▓ рд╣реИ, рддреЛ wrappedComponent рд░реЗрдВрдбрд░ рдХрд░реЗрдВ
        return <WrappedComponent {...props} />;
    };

    return AuthComponent;
};

export default withAuth;