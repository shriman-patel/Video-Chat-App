// Backend/src/services/codeExecutionService.js

// üö® ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ø‡§π ‡§™‡§æ‡§• ‡§∏‡§π‡•Ä ‡§π‡•à, ‡§ú‡•ã codeExecutionController.js ‡§ï‡•ã ‡§¶‡§∞‡•ç‡§∂‡§æ‡§§‡§æ ‡§π‡•à
import { executeCode } from './codeExecutionController.js'; 
// (‡§™‡§æ‡§• ‡§ï‡•ã ‡§Ö‡§™‡§®‡•Ä ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§¨‡§¶‡§≤‡•á‡§Ç)

/**
 * Socket.IO ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§™‡§∞ ‡§ï‡•ã‡§° ‡§è‡§ó‡•ç‡§ú‡•Ä‡§ï‡•ç‡§Ø‡•Ç‡§∂‡§® ‡§î‡§∞ ‡§∂‡•á‡§Ø‡§∞‡§ø‡§Ç‡§ó ‡§≤‡§ø‡§∏‡§®‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§ú‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à‡•§
 * @param {Socket} socket - ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§∏‡•â‡§ï‡•á‡§ü ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü‡•§
 * @param {Server} io - ‡§Æ‡•Å‡§ñ‡•ç‡§Ø Socket.IO ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§á‡§Ç‡§∏‡•ç‡§ü‡•á‡§Ç‡§∏‡•§
 */
// ‚úÖ ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§¶‡§≤‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à (‡§ú‡•à‡§∏‡§æ ‡§ï‡§ø ‡§π‡§Æ‡§®‡•á socketManager ‡§Æ‡•á‡§Ç ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à)
export function registerCodeListeners(socket, io) { 
    
    // 1. ‡§ï‡•ã‡§° ‡§∞‡§® ‡§ï‡§∞‡§®‡•á ‡§™‡§∞
    socket.on("run-code", async ({ roomId, code, language }) => {
        console.log(`[EXECUTION_SERVICE]: Run Code event received for Room: ${roomId}.`);
        
        // ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§ï‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç
        io.to(roomId).emit('code-output', { output: "Running code..." });

        try {
            // executeCodeController ‡§∏‡•á ‡§Ö‡§∏‡§≤‡•Ä ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç
            const outputText = await executeCode(code, language); 
            
            // ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§∏‡§≠‡•Ä ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç
            io.to(roomId).emit('code-output', { output: outputText });
            console.log(`[EXECUTION_SERVICE]: Code executed successfully. Output sent to room ${roomId}.`);

        } catch (error) {
            console.error("[EXECUTION_SERVICE]: Error during code execution:", error);
            // ‡§è‡§∞‡§∞ ‡§ï‡•ã ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§ï‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç
            io.to(roomId).emit('code-output', { 
                output: `Server Execution Error: ${error.message}. Check Backend logs for details.` 
            });
        }
    });

    // 2. ‡§∞‡§ø‡§Ø‡§≤-‡§ü‡§æ‡§á‡§Æ ‡§∂‡•á‡§Ø‡§∞‡§ø‡§Ç‡§ó
    socket.on("code-change", (data) => {
        // ‡§≠‡•á‡§ú‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§ï‡•ã ‡§õ‡•ã‡§°‡§º‡§ï‡§∞ ‡§∞‡•Ç‡§Æ ‡§Æ‡•á‡§Ç ‡§∏‡§≠‡•Ä ‡§ï‡•ã ‡§ï‡•ã‡§° ‡§≠‡•á‡§ú‡•á‡§Ç
        socket.to(data.roomId).emit("receive-code-change", data);
    });

    // ‚ùå io.on("connection", ...) ‡§¨‡•ç‡§≤‡•â‡§ï ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à
}