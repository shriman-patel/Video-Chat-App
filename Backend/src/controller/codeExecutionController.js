// src/controller/codeExecutionController.js

import axios from 'axios';

// üö®üö®üö® ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§¨‡§¶‡§≤‡§æ‡§µ üö®üö®üö®
// ‡§Ü‡§™‡§ï‡•ã JDoodle ‡§™‡§∞ ‡§è‡§ï ‡§®‡§ø‡§É‡§∂‡•Å‡§≤‡•ç‡§ï ‡§ñ‡§æ‡§§‡§æ ‡§¨‡§®‡§æ‡§®‡§æ ‡§π‡•ã‡§ó‡§æ ‡§î‡§∞ ‡§Ö‡§™‡§®‡•Ä ‡§ï‡•Å‡§Ç‡§ú‡§ø‡§Ø‡§æ‡§Å ‡§Ø‡§π‡§æ‡§Å ‡§°‡§æ‡§≤‡§®‡•Ä ‡§π‡•ã‡§Ç‡§ó‡•Ä‡•§
const JDOODLE_CLIENT_ID = "9fdd30556175b074f1b72b60dbc8f807"; 
const JDOODLE_CLIENT_SECRET = "677577a17bfcc525dc38324ead55c3fc0f2525a3b297ecce48227773cf096478"; 

// JDoodle API ‡§ï‡§æ ‡§¨‡•á‡§∏ URL
const JDOODLE_API_URL = 'https://api.jdoodle.com/v1/execute';

/**
 * ‡§ï‡•ã‡§° ‡§ï‡•ã JDoodle API ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§è‡§ó‡•ç‡§ú‡•Ä‡§ï‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
 * @param {string} code - ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§° ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó
 * @param {string} language - ‡§ï‡•ã‡§° ‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ (‡§ú‡•à‡§∏‡•á: 'javascript', 'python3', 'java')
 * @returns {Promise<string>} - ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó
 */
export async function executeCode(code, language) {
    
    // 1. JDoodle ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≠‡§æ‡§∑‡§æ ‡§î‡§∞ ‡§µ‡§∞‡•ç‡§ú‡§® ‡§Æ‡•à‡§™‡§ø‡§Ç‡§ó (JDoodle API Docs ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞)
    const languageMap = {
        javascript: { lang: 'nodejs', version: '4' }, // JDoodle 'javascript' ‡§ï‡•ã 'nodejs' ‡§ï‡§π‡§§‡§æ ‡§π‡•à
        python: { lang: 'python3', version: '4' },
        java: { lang: 'java', version: '4' },
        // 'c', 'cpp', 'php' ‡§Ü‡§¶‡§ø ‡§≠‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•à‡§Ç‡•§
    };

    const config = languageMap[language.toLowerCase()];

    if (!config) {
        return `Unsupported language: ${language}. Please select JavaScript, Python, or Java.`;
    }

    if (JDOODLE_CLIENT_ID === "YOUR_CLIENT_ID" || JDOODLE_CLIENT_SECRET === "YOUR_CLIENT_SECRET") {
        return "FATAL ERROR: Please set your JDoodle Client ID and Secret in codeExecutionController.js";
    }

    try {
        const payload = {
            clientId: JDOODLE_CLIENT_ID,
            clientSecret: JDOODLE_CLIENT_SECRET,
            script: code,
            language: config.lang,
            versionIndex: config.version,
            // stdin (‡§á‡§®‡§™‡•Å‡§ü) ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§ú‡•ã‡§°‡§º‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
        };

        const response = await axios.post(JDOODLE_API_URL, payload);

        // JDoodle Response Structure: { output, statusCode, cpuTime, memory }

        const output = response.data.output;
        const statusCode = response.data.statusCode;
        
        if (statusCode !== 200) {
            // ‡§Ø‡§¶‡§ø API ‡§®‡•á ‡§è‡§∞‡§∞ ‡§ï‡•ã‡§° (‡§ú‡•à‡§∏‡•á ‡§ï‡§Ç‡§™‡§æ‡§á‡§≤ ‡§è‡§∞‡§∞) ‡§µ‡§æ‡§™‡§∏ ‡§ï‡§ø‡§Ø‡§æ
            return `Execution Error (Status ${statusCode}):\n${output || 'Unknown error occurred.'}`;
        }
        
        return output;

    } catch (error) {
        console.error("JDoodle API Call Failed:", error.message);
        
        if (error.response) {
            // ‡§Ø‡§¶‡§ø ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§è‡§∞‡§∞ ‡§Ø‡§æ HTTP ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ 4xx/5xx
            return `Compiler Service Error: Status ${error.response.status} - ${error.response.data.output || 'Unknown API Error'}`;
        } else {
            // ‡§Ø‡§¶‡§ø ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§è‡§∞‡§∞ ‡§π‡•à (‡§ú‡•à‡§∏‡•á ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§Ø‡§æ Axios ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à)
            return `Network Error: Could not connect to compiler service (${error.message}). Please check your internet/Axios installation.`;
        }
    }
}